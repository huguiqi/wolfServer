<?xml version="1.0" encoding="UTF-8"?>
<!--
	xmlns 声明默认的命名空间
	xmlns:context 声明context命名空间
	xmlns:p 声明p命名空间，用于简化spring配置文件中属性声明的写法
	xmlns:mvc 声明mvc命名空间
	xmlns:xsi 声明XML Schema实例名称空间，并将xsi前缀与该命名空间绑定
	xsi:schemaLocation 引入Schema模式文档，解析器使用文档对xml进行校验，它的值是成对出现的，
		第一个表示命名空间，第二个表示该命名空间模式文档位置，中间用空格隔开
	如果抛出Failed to read schema document异常，是因为无法访问网址，需要在pom中添加相关依赖
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:annotation-config />
    <!-- 需要扫描的包，@Repository、@Service等
    -->
    <context:component-scan base-package="com.wolf">
    <!--
    	启用了对类包进行扫描以实施注释驱动 Bean 定义的功能,
		启用了注释驱动自动注入的功能,隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor
		和 CommonAnnotationBeanPostProcessor,就可以将 <context:annotation-config/>移除了
    -->
    </context:component-scan>

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          lazy-init="false">
        <property name="locations">
            <!--the latter properties override the former-->
            <list>
                <value>classpath:conf/db/jdbc-test.properties</value>
                <value>classpath:conf/db/pool-test.properties</value>
                <value>classpath:env.properties</value>
                <value>classpath:domain.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="acquireIncrement" value="${pool.acquireIncrement}" />
        <property name="initialPoolSize" value="${pool.initialPoolSize}" />
        <property name="minPoolSize" value="${pool.minPoolSize}" />
        <property name="maxPoolSize" value="${pool.maxPoolSize}" />
        <property name="autoCommitOnClose" value="${pool.autoCommitOnClose}" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean name="restTemplate" class="org.springframework.web.client.RestTemplate"/>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- define the SqlSessionFactory, notice that configLocation is not needed
        when you use MapperFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactory"  ref="sqlSessionFactory"/>
        <property name="basePackage" value="com.wolf.mapper"></property>
    </bean>

    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.wolf.authentication.persistent.UserMapper" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <mvc:annotation-driven/>
</beans>